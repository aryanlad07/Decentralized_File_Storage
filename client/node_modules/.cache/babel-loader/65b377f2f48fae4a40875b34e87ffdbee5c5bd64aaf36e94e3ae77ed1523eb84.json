{"ast":null,"code":"var _jsxFileName = \"E:\\\\VIIT\\\\6th sem\\\\web\\\\drive\\\\client\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// import logo from './logo.svg';\nimport Upload from \"./artifacts/contracts/Upload.sol/Upload.json\"; //by running haedhat we get this artifacts see details in theory file\nimport { useState, useEffect } from \"react\";\nimport { ethers } from \"ethers\";\n// import './App.css';\nimport '../src/App.css';\nimport FileUpload from \"./components/FileUpload\";\nimport Display from \"./components/Display\";\nimport Navbar from \"./components/Navbar\";\nimport Model from \"./components/Model\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [account, setAccount] = useState(\"\");\n  const [contract, setContract] = useState(null);\n  const [provider, setProvider] = useState(null);\n  const [modalOpen, setModalOpen] = useState(false);\n  useEffect(() => {\n    const provider = new ethers.providers.Web3Provider(window.ethereum); //provider use to read data  of blockchin and for write data we need signer.metamask injects window.etherium\n\n    const loadProvider = async () => {\n      if (provider) {\n        window.ethereum.on(\"chainChanged\", () => {\n          //if on run time we change the blockchain then page will not reload automatically for reload automatically we  use this\n          window.location.reload();\n        });\n        window.ethereum.on(\"accountsChanged\", () => {\n          //if on run time we change the metamask account then page will not reload automatically for that we use this\n          window.location.reload();\n        });\n        await provider.send(\"eth_requestAccounts\", []); //it will open metamask wallet account\n        const signer = provider.getSigner(); //for write data on blockchain we need signer\n        const address = await signer.getAddress(); // it will give address of account which is connected\n        setAccount(address);\n        let contractAddress = \"0x5FbDB2315678afecb367f032d93F642f64180aa3\"; //IMP Your Contract Address Here i.e after running npx hardhat run --network localhost scripts/deploy.js   we can  get this contract address.after closing vscode it will vanish blochchain so when we want to run this code we need to agin compile and deply contract and give that address again here\n\n        const contract = new ethers.Contract(\n        //creating contract instance\n        contractAddress, Upload.abi, signer);\n        console.log(contract);\n        setContract(contract);\n        setProvider(provider);\n      } else {\n        console.error(\"Metamask is not installed\");\n      }\n    };\n    provider && loadProvider(); //here we check provider is there or not  and we call loadprovider\n  }, []); //if we not give ,[] then it load at evry render and run infinite time;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        style: {\n          color: \"white\"\n        },\n        children: \"ImageShield\\xA0Vault\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: \"white\"\n        },\n        children: [\"Account : \", account ? account : \"Not connected\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"bg\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"bg bg2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"bg bg3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FileUpload, {\n        account: account,\n        provider: provider,\n        contract: contract\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Display, {\n        contract: contract,\n        account: account\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"yGCxXQ87YH7dBPtrsE7SNVrz99c=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Upload","useState","useEffect","ethers","FileUpload","Display","Navbar","Model","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","account","setAccount","contract","setContract","provider","setProvider","modalOpen","setModalOpen","providers","Web3Provider","window","ethereum","loadProvider","on","location","reload","send","signer","getSigner","address","getAddress","contractAddress","Contract","abi","console","log","error","children","fileName","_jsxFileName","lineNumber","columnNumber","className","style","color","class","_c","$RefreshReg$"],"sources":["E:/VIIT/6th sem/web/drive/client/src/App.js"],"sourcesContent":["// import logo from './logo.svg';\nimport Upload from \"./artifacts/contracts/Upload.sol/Upload.json\"        //by running haedhat we get this artifacts see details in theory file\nimport {useState,useEffect} from \"react\"\nimport { ethers } from \"ethers\";\n// import './App.css';\nimport '../src/App.css'\nimport FileUpload from \"./components/FileUpload\"\nimport Display from \"./components/Display\";\nimport Navbar from \"./components/Navbar\";\nimport Model from \"./components/Model\";\nfunction App() {\n  const [account, setAccount] = useState(\"\");\n  const [contract, setContract] = useState(null);\n  const [provider, setProvider] = useState(null);\n  const [modalOpen, setModalOpen] = useState(false);\n\n  useEffect(() => {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);    //provider use to read data  of blockchin and for write data we need signer.metamask injects window.etherium\n\n    const loadProvider = async () => {\n      if (provider) {\n        window.ethereum.on(\"chainChanged\", () => {        //if on run time we change the blockchain then page will not reload automatically for reload automatically we  use this\n          window.location.reload();\n        });\n\n        window.ethereum.on(\"accountsChanged\", () => {     //if on run time we change the metamask account then page will not reload automatically for that we use this\n          window.location.reload();\n        });\n        await provider.send(\"eth_requestAccounts\", []);      //it will open metamask wallet account\n        const signer = provider.getSigner();                 //for write data on blockchain we need signer\n        const address = await signer.getAddress();           // it will give address of account which is connected\n        setAccount(address);\n        let contractAddress = \"0x5FbDB2315678afecb367f032d93F642f64180aa3\";      //IMP Your Contract Address Here i.e after running npx hardhat run --network localhost scripts/deploy.js   we can  get this contract address.after closing vscode it will vanish blochchain so when we want to run this code we need to agin compile and deply contract and give that address again here\n\n        const contract = new ethers.Contract(    //creating contract instance\n          contractAddress, \n          Upload.abi,\n          signer\n        );\n        console.log(contract);\n        setContract(contract);\n        setProvider(provider);\n      } else {\n        console.error(\"Metamask is not installed\");\n      }\n    };\n    provider && loadProvider();    //here we check provider is there or not  and we call loadprovider\n  }, []);   //if we not give ,[] then it load at evry render and run infinite time;\n  return (\n    <>\n      {/* {!modalOpen && (\n        <button className=\"share\" onClick={() => setModalOpen(true)}>\n          Share\n        </button>\n      )}\n      {modalOpen && (\n        <Model setModalOpen={setModalOpen} contract={contract}></Model>\n      )} */}\n      <Navbar></Navbar>\n      <div className=\"App\">\n        \n        <h1 style={{ color: \"white\" }}>ImageShieldÂ Vault</h1>\n        <p style={{ color: \"white\" }}>\n          Account : {account ? account : \"Not connected\"}\n        </p>\n        <div class=\"bg\"></div>\n        <div class=\"bg bg2\"></div>\n        <div class=\"bg bg3\"></div>\n\n        \n        <FileUpload\n          account={account}\n          provider={provider}\n          contract={contract}\n        ></FileUpload>\n        <Display contract={contract} account={account}></Display>\n      </div>\n    </>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}