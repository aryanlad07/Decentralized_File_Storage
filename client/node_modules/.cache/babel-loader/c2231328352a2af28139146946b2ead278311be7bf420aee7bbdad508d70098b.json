{"ast":null,"code":"var _jsxFileName = \"E:\\\\VIIT\\\\6th sem\\\\web\\\\drive\\\\client\\\\src\\\\components\\\\Display.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport axios from 'axios';\nimport './Display.css';\nimport Model from './Model';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Display = ({\n  contract,\n  account\n}) => {\n  _s();\n  const [data, setData] = useState(\"\");\n  const [otherAddress, setOtherAddress] = useState(\"\");\n  const [showModal, setShowModal] = useState(false);\n  const [fileToShare, setFileToShare] = useState(\"\"); // New state to store the file to share\n\n  const getdata = async () => {\n    try {\n      let dataArray;\n      if (otherAddress) {\n        console.log(otherAddress);\n        // console.log(account);\n        dataArray = await contract.getAccessibleFiles(otherAddress, account);\n        console.log(dataArray);\n      } else {\n        dataArray = await contract.getFileList(account);\n      }\n      const isEmpty = dataArray.length === 0;\n      if (!isEmpty) {\n        const images = dataArray.map((item, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modelcontainer\",\n          children: [/*#__PURE__*/_jsxDEV(\"a\", {\n            href: item,\n            target: \"_blank\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: item,\n              alt: \"new\",\n              className: \"image-list\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 29,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 25\n          }, this), !otherAddress &&\n          /*#__PURE__*/\n          // Display the \"Share Access\" button only if otherAddress is empty\n          _jsxDEV(\"div\", {\n            className: \"button-group\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => openShareModal(item),\n              children: \"Access control\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 39,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 29\n          }, this)]\n        }, i, true, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 21\n        }, this));\n        setData(images);\n      } else {\n        alert(\"No File to display\");\n      }\n    } catch (error) {\n      alert(\"Error getting data: \" + error.message);\n    }\n  };\n  const openShareModal = file => {\n    // Updated function to set the file to share and open the modal\n    setFileToShare(file);\n    setShowModal(true);\n    console.log(showModal);\n    console.log(fileToShare);\n  };\n  const deletefile = async (fileHash, dataArray) => {\n    const parts = fileHash.split('/'); // Split the URL by '/'\n    const hash = parts[parts.length - 1]; // Get the last part of the URL\n    console.log(hash);\n    try {\n      const response = await axios({\n        method: \"delete\",\n        url: `https://api.pinata.cloud/pinning/unpin/${hash}`,\n        headers: {\n          pinata_api_key: `f7bfae89954d6952f7db`,\n          pinata_secret_api_key: `b14a8922caffb575dc24061e5e6eebfd7f4b16c4e2b4ba078349a94cc24a7004`\n        }\n      });\n      const indexToRemove = dataArray.indexOf(fileHash);\n      if (indexToRemove !== -1) {\n        // Remove the hash from the array using splice()\n        dataArray.splice(indexToRemove, 1);\n        console.log(`File with hash ${fileHash} removed from dataarray`);\n      } else {\n        console.log(`File with hash ${fileHash} not found in dataarray`);\n      }\n      console.log('File deleted from IPFS successfully:', response.data);\n    } catch (error) {\n      console.error('Error deleting file from IPFS:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"image-list\",\n      children: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"lst\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter Address\",\n        className: \"address\",\n        value: otherAddress,\n        onChange: e => setOtherAddress(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"center button\",\n        onClick: getdata,\n        children: \"VIEW UPLOADS\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 13\n      }, this), showModal && /*#__PURE__*/_jsxDEV(Model, {\n        setShowModal: setShowModal,\n        contract: contract,\n        account: account,\n        fileToShare: fileToShare // Pass the file to share to the Model component\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(Display, \"FJ3Fu9+QrXkjlcqiXTozq1Q50MU=\");\n_c = Display;\nexport default Display;\n\n// import { useState } from \"react\";\n// import './Display.css'\n// const Display=({contract,account})=>{\n//     const [data, setData] = useState(\"\");\n//   const getdata = async () => {\n//     let dataArray;\n//     const Otheraddress = document.querySelector(\".address\").value;    //it will take adress if that user has given any other address to retrive other addresss account data\n//     try {\n//       if (Otheraddress) {      //if other address provided then we retrive that address files\n//         dataArray = await contract.display(Otheraddress);      //this contract function is defined in smart contract\n//         console.log(dataArray);\n//       } else {                 //else we retrive current user files\n//         dataArray = await contract.display(account);\n//       }\n//     } catch (e) {\n//       alert(\"You don't have access\");\n//     }\n//     const isEmpty = Object.keys(dataArray).length === 0;   //if that account has not any files i.e file url then ibecome true;\n\n//     if (!isEmpty) {\n//       const str = dataArray.toString();    //becouse values are in object form we convert them into string\n//       const str_array = str.split(\",\");    //str is in form of concanated form so we split eac url and put them into array in each element in array is image ling on the ipfs\n//       // console.log(str);\n//       // console.log(str_array);\n//       const images = str_array.map((item, i) => {\n//         return (\n//           <a href={item} key={i} target=\"_blank\">\n//             <img\n//               key={i}\n//               // src={`https://gateway.pinata.cloud/ipfs/${item.substring(6)}`}    // item contain entire url but we need part only after ipfs/ becouse before part of ipfs/ is default and we already givenn here . to see each image url use console.log(str_array); you will get url format. this is done becouse img tag not working by giving directly url\n//               src={item}\n//               alt=\"new\"\n//               className=\"image-list\"\n//             ></img>\n//           </a>\n//         );\n//       });\n//       setData(images);\n//     } else {\n//       alert(\"No image to display\");\n//     }\n//   };\n//   return (\n//     <>\n//       <div className=\"image-list\">{data}</div>\n//       <input\n//         type=\"text\"\n//         placeholder=\"Enter Address\"\n//         className=\"address\"\n//       ></input>\n//       <button className=\"center button\" onClick={getdata}>\n//         Get Data\n//       </button>\n//     </>\n//   );\n// }\n// // module.exports=Display\n// export default Display;\nvar _c;\n$RefreshReg$(_c, \"Display\");","map":{"version":3,"names":["useState","axios","Model","jsxDEV","_jsxDEV","Fragment","_Fragment","Display","contract","account","_s","data","setData","otherAddress","setOtherAddress","showModal","setShowModal","fileToShare","setFileToShare","getdata","dataArray","console","log","getAccessibleFiles","getFileList","isEmpty","length","images","map","item","i","className","children","href","target","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","onClick","openShareModal","alert","error","message","file","deletefile","fileHash","parts","split","hash","response","method","url","headers","pinata_api_key","pinata_secret_api_key","indexToRemove","indexOf","splice","type","placeholder","value","onChange","e","_c","$RefreshReg$"],"sources":["E:/VIIT/6th sem/web/drive/client/src/components/Display.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport axios from 'axios';\r\nimport './Display.css';\r\nimport Model from './Model';\r\n\r\nconst Display = ({ contract, account }) => {\r\n    const [data, setData] = useState(\"\");\r\n    const [otherAddress, setOtherAddress] = useState(\"\");\r\n    const [showModal, setShowModal] = useState(false);\r\n    const [fileToShare, setFileToShare] = useState(\"\"); // New state to store the file to share\r\n\r\n    const getdata = async () => {\r\n        try {\r\n            let dataArray;\r\n            if (otherAddress) {\r\n              console.log(otherAddress);\r\n              // console.log(account);\r\n                dataArray = await contract.getAccessibleFiles(otherAddress,account);\r\n                console.log(dataArray);\r\n            } else {\r\n                dataArray = await contract.getFileList(account);\r\n            }\r\n            const isEmpty = dataArray.length === 0;\r\n\r\n            if (!isEmpty) {\r\n                const images = dataArray.map((item, i) => (\r\n                    <div className=\"modelcontainer\" key={i}>\r\n                        <a href={item} target=\"_blank\">\r\n                            <img\r\n                                src={item}\r\n                                alt=\"new\"\r\n                                className=\"image-list\"\r\n                            />\r\n                        </a>\r\n                        {!otherAddress && ( // Display the \"Share Access\" button only if otherAddress is empty\r\n                            <div className=\"button-group\">\r\n                                {/* <button onClick={() => openShareModal(item)}>Share Access</button>\r\n                                <button onClick={() => openShareModal(item)}>unShare Access</button> */}\r\n                                <button  onClick={() => openShareModal(item)}>Access control</button>\r\n                                {/* <button  onClick={() => deletefile(item,dataArray)}>Delete file</button> */}\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                ));\r\n                setData(images);\r\n            } else {\r\n                alert(\"No File to display\");\r\n            }\r\n        } catch (error) {\r\n            alert(\"Error getting data: \" + error.message);\r\n        }\r\n    };\r\n\r\n    const openShareModal = (file) => { // Updated function to set the file to share and open the modal\r\n        setFileToShare(file);\r\n        setShowModal(true);\r\n        console.log(showModal);\r\n        console.log(fileToShare);\r\n    };\r\n    const deletefile = async (fileHash,dataArray) => {\r\nconst parts = fileHash.split('/'); // Split the URL by '/'\r\nconst hash = parts[parts.length - 1]; // Get the last part of the URL\r\nconsole.log(hash);\r\n        try {\r\n            const response = await axios({\r\n                method: \"delete\",\r\n                url: `https://api.pinata.cloud/pinning/unpin/${hash}`,\r\n                headers: {\r\n                    pinata_api_key: `f7bfae89954d6952f7db`,\r\n                    pinata_secret_api_key: `b14a8922caffb575dc24061e5e6eebfd7f4b16c4e2b4ba078349a94cc24a7004`,\r\n                },\r\n            });\r\n            const indexToRemove = dataArray.indexOf(fileHash);\r\n            if (indexToRemove !== -1) {\r\n                // Remove the hash from the array using splice()\r\n                dataArray.splice(indexToRemove, 1);\r\n                console.log(`File with hash ${fileHash} removed from dataarray`);\r\n            } else {\r\n                console.log(`File with hash ${fileHash} not found in dataarray`);\r\n            }\r\n            console.log('File deleted from IPFS successfully:', response.data);\r\n        } catch (error) {\r\n            console.error('Error deleting file from IPFS:', error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className=\"image-list\">{data}</div>\r\n            <div className=\"lst\">\r\n            <input\r\n                type=\"text\"\r\n                placeholder=\"Enter Address\"\r\n                className=\"address\"\r\n                value={otherAddress}\r\n                onChange={(e) => setOtherAddress(e.target.value)}\r\n            />\r\n            <button className=\"center button\" onClick={getdata}>\r\n                VIEW UPLOADS\r\n            </button>\r\n            {showModal && (\r\n                <Model\r\n                setShowModal={setShowModal}\r\n                    contract={contract}\r\n                    account={account}\r\n                    fileToShare={fileToShare} // Pass the file to share to the Model component\r\n                />\r\n            )}</div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Display;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import { useState } from \"react\";\r\n// import './Display.css'\r\n// const Display=({contract,account})=>{\r\n//     const [data, setData] = useState(\"\");\r\n//   const getdata = async () => {\r\n//     let dataArray;\r\n//     const Otheraddress = document.querySelector(\".address\").value;    //it will take adress if that user has given any other address to retrive other addresss account data\r\n//     try {\r\n//       if (Otheraddress) {      //if other address provided then we retrive that address files\r\n//         dataArray = await contract.display(Otheraddress);      //this contract function is defined in smart contract\r\n//         console.log(dataArray);\r\n//       } else {                 //else we retrive current user files\r\n//         dataArray = await contract.display(account);\r\n//       }\r\n//     } catch (e) {\r\n//       alert(\"You don't have access\");\r\n//     }\r\n//     const isEmpty = Object.keys(dataArray).length === 0;   //if that account has not any files i.e file url then ibecome true;\r\n\r\n//     if (!isEmpty) {\r\n//       const str = dataArray.toString();    //becouse values are in object form we convert them into string\r\n//       const str_array = str.split(\",\");    //str is in form of concanated form so we split eac url and put them into array in each element in array is image ling on the ipfs\r\n//       // console.log(str);\r\n//       // console.log(str_array);\r\n//       const images = str_array.map((item, i) => {\r\n//         return (\r\n//           <a href={item} key={i} target=\"_blank\">\r\n//             <img\r\n//               key={i}\r\n//               // src={`https://gateway.pinata.cloud/ipfs/${item.substring(6)}`}    // item contain entire url but we need part only after ipfs/ becouse before part of ipfs/ is default and we already givenn here . to see each image url use console.log(str_array); you will get url format. this is done becouse img tag not working by giving directly url\r\n//               src={item}\r\n//               alt=\"new\"\r\n//               className=\"image-list\"\r\n//             ></img>\r\n//           </a>\r\n//         );\r\n//       });\r\n//       setData(images);\r\n//     } else {\r\n//       alert(\"No image to display\");\r\n//     }\r\n//   };\r\n//   return (\r\n//     <>\r\n//       <div className=\"image-list\">{data}</div>\r\n//       <input\r\n//         type=\"text\"\r\n//         placeholder=\"Enter Address\"\r\n//         className=\"address\"\r\n//       ></input>\r\n//       <button className=\"center button\" onClick={getdata}>\r\n//         Get Data\r\n//       </button>\r\n//     </>\r\n//   );\r\n// }\r\n// // module.exports=Display\r\n// export default Display;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}