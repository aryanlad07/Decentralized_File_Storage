{"ast":null,"code":"var _jsxFileName = \"E:\\\\VIIT\\\\6th sem\\\\web\\\\drive\\\\client\\\\src\\\\components\\\\FileUpload.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport axios from 'axios';\nimport \"./FileUpload.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FileUpload = ({\n  contract,\n  account\n}) => {\n  _s();\n  const [file, setFile] = useState(null);\n  const [fileName, setFileName] = useState(\"No image selected\");\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (file) {\n      try {\n        const formData = new FormData();\n        formData.append(\"file\", file);\n        const resFile = await axios({\n          method: \"post\",\n          url: \"https://api.pinata.cloud/pinning/pinFileToIPFS\",\n          data: formData,\n          headers: {\n            pinata_api_key: `f7bfae89954d6952f7db`,\n            pinata_secret_api_key: `92a0801e2a1e2ab0491f6db6aa8ccae08b2c67b8dd464e8fa9bbb8855f648088`,\n            \"Content-Type\": \"multipart/form-data\"\n          }\n        });\n        const ImgHash = `https://gateway.pinata.cloud/ipfs/${resFile.data.IpfsHash}`;\n        contract.addFile(ImgHash); // Changed function call from add(account, ImgHash) to addFile(ImgHash)\n        alert(\"Successfully File Uploaded\");\n        setFileName(\"No File selected\");\n        setFile(null);\n      } catch (e) {\n        alert(\"Unable to upload File to Pinata\");\n      }\n    } else {\n      alert(\"Please select an File to upload\");\n    }\n  };\n  const retrieveFile = e => {\n    const data = e.target.files[0];\n    const reader = new window.FileReader();\n    reader.readAsArrayBuffer(data);\n    reader.onloadend = () => {\n      setFile(data);\n    };\n    setFileName(data.name);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"top\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"form\",\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"file-upload\",\n        className: \"choose\",\n        children: \"Choose File\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        disabled: !account,\n        type: \"file\",\n        id: \"file-upload\",\n        name: \"data\",\n        onChange: retrieveFile\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"textArea\",\n        children: [\"File: \", fileName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"upload\",\n        disabled: !file,\n        children: \"Upload File\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n};\n_s(FileUpload, \"iogOrXrY+NbnG1T+Sl+25rviPM0=\");\n_c = FileUpload;\nexport default FileUpload;\n\n// import { useState } from \"react\"\n// import axios from 'axios';\n// import \"./FileUpload.css\";\n// const FileUpload=({ contract, account, provider })=>{\n//     const [file, setFile] = useState(null);\n//   const [fileName, setFileName] = useState(\"No image selected\");\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();        //it will not reload page when form is submitted\n//     if (file) {\n//       try {\n//         const formData = new FormData();      \n//         formData.append(\"file\", file);     //this 'file' store as key and file as a value in formData object\n\n//         const resFile = await axios({    //this axious will store the form data i.e image file on IPFS using pinata as a service\n//           method: \"post\",\n//           url: \"https://api.pinata.cloud/pinning/pinFileToIPFS\",\n//           data: formData,\n//           headers: {\n//             // pinata_api_key: `Enter Your Key`,\n//             // pinata_secret_api_key: `Enter Your Secret Key`,\n//             pinata_api_key: `f7bfae89954d6952f7db`,\n//             pinata_secret_api_key: `b14a8922caffb575dc24061e5e6eebfd7f4b16c4e2b4ba078349a94cc24a7004`,\n//             \"Content-Type\": \"multipart/form-data\",\n//           },\n//         });\n//         const ImgHash = `https://gateway.pinata.cloud/ipfs/${resFile.data.IpfsHash}`;   //imsge hash is generated see ipfs documentation how to get image hash\n//         contract.add(account,ImgHash);     //this image hash is added on smart contract this add function is defined in smart contract\n//         alert(\"Successfully Image Uploaded\");\n//         setFileName(\"No image selected\");\n//         setFile(null);\n//       } catch (e) {\n//         alert(\"Unable to upload image to Pinata\");\n//       }\n//     }\n//     alert(\"Successfully Image Uploaded\");\n//     setFileName(\"No image selected\");\n//     setFile(null);\n//   };\n//   const retrieveFile = (e) => {\n//     const data = e.target.files[0]; //files array of files object this object contain all information of that choosen file\n//     // console.log(data);\n//     const reader = new window.FileReader();     //to read the file\n//     reader.readAsArrayBuffer(data);\n//     reader.onloadend = () => {        //when file completely read then it will set that file or we can say choose that file\n//       setFile(e.target.files[0]);\n//     };\n//     setFileName(e.target.files[0].name);   //and this file object contain all info about file so from that we choose that filename\n//     e.preventDefault();\n//   };\n//   return (\n//     <div className=\"top\">\n//       <form className=\"form\" onSubmit={handleSubmit}>\n//         <label htmlFor=\"file-upload\" className=\"choose\">\n//           Choose File\n//         </label>\n//         <input\n//           disabled={!account}    //if metamask account is not there then it will not take input\n//           type=\"file\"\n//           id=\"file-upload\"\n//           name=\"data\"\n//           onChange={retrieveFile}\n//         />\n//         <span className=\"textArea\">File: {fileName}</span>\n//         <button type=\"submit\" className=\"upload\" disabled={!file}>   \n//           Upload File                                                \n//         </button>\n//         {/*upload button not work till there is any file choosen this is done by disable property otherwise withoud file also it will functioning*/ }\n//       </form>\n//     </div>\n//   );\n// }\n// export default FileUpload\nvar _c;\n$RefreshReg$(_c, \"FileUpload\");","map":{"version":3,"names":["useState","axios","jsxDEV","_jsxDEV","FileUpload","contract","account","_s","file","setFile","fileName","setFileName","handleSubmit","e","preventDefault","formData","FormData","append","resFile","method","url","data","headers","pinata_api_key","pinata_secret_api_key","ImgHash","IpfsHash","addFile","alert","retrieveFile","target","files","reader","window","FileReader","readAsArrayBuffer","onloadend","name","className","children","onSubmit","htmlFor","_jsxFileName","lineNumber","columnNumber","disabled","type","id","onChange","_c","$RefreshReg$"],"sources":["E:/VIIT/6th sem/web/drive/client/src/components/FileUpload.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport axios from 'axios';\r\nimport \"./FileUpload.css\";\r\n\r\nconst FileUpload = ({ contract, account }) => {\r\n    const [file, setFile] = useState(null);\r\n    const [fileName, setFileName] = useState(\"No image selected\");\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        if (file) {\r\n            try {\r\n                const formData = new FormData();\r\n                formData.append(\"file\", file);\r\n\r\n                const resFile = await axios({\r\n                    method: \"post\",\r\n                    url: \"https://api.pinata.cloud/pinning/pinFileToIPFS\",\r\n                    data: formData,\r\n                    headers: {\r\n                        pinata_api_key: `f7bfae89954d6952f7db`,\r\n                        pinata_secret_api_key: `92a0801e2a1e2ab0491f6db6aa8ccae08b2c67b8dd464e8fa9bbb8855f648088`,\r\n                        \"Content-Type\": \"multipart/form-data\",\r\n                    },\r\n                });\r\n                \r\n                const ImgHash = `https://gateway.pinata.cloud/ipfs/${resFile.data.IpfsHash}`;\r\n                contract.addFile(ImgHash); // Changed function call from add(account, ImgHash) to addFile(ImgHash)\r\n                alert(\"Successfully File Uploaded\");\r\n                setFileName(\"No File selected\");\r\n                setFile(null);\r\n            } catch (e) {\r\n                alert(\"Unable to upload File to Pinata\");\r\n            }\r\n        } else {\r\n            alert(\"Please select an File to upload\");\r\n        }\r\n    };\r\n\r\n    const retrieveFile = (e) => {\r\n        const data = e.target.files[0];\r\n        const reader = new window.FileReader();\r\n        reader.readAsArrayBuffer(data);\r\n        reader.onloadend = () => {\r\n            setFile(data);\r\n        };\r\n        setFileName(data.name);\r\n    };\r\n\r\n    return (\r\n        <div className=\"top\">\r\n            <form className=\"form\" onSubmit={handleSubmit}>\r\n                <label htmlFor=\"file-upload\" className=\"choose\">\r\n                    Choose File\r\n                </label>\r\n                <input\r\n                    disabled={!account}\r\n                    type=\"file\"\r\n                    id=\"file-upload\"\r\n                    name=\"data\"\r\n                    onChange={retrieveFile}\r\n                />\r\n                <span className=\"textArea\">File: {fileName}</span>\r\n                <button type=\"submit\" className=\"upload\" disabled={!file}>\r\n                    Upload File\r\n                </button>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FileUpload;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import { useState } from \"react\"\r\n// import axios from 'axios';\r\n// import \"./FileUpload.css\";\r\n// const FileUpload=({ contract, account, provider })=>{\r\n//     const [file, setFile] = useState(null);\r\n//   const [fileName, setFileName] = useState(\"No image selected\");\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();        //it will not reload page when form is submitted\r\n//     if (file) {\r\n//       try {\r\n//         const formData = new FormData();      \r\n//         formData.append(\"file\", file);     //this 'file' store as key and file as a value in formData object\r\n\r\n//         const resFile = await axios({    //this axious will store the form data i.e image file on IPFS using pinata as a service\r\n//           method: \"post\",\r\n//           url: \"https://api.pinata.cloud/pinning/pinFileToIPFS\",\r\n//           data: formData,\r\n//           headers: {\r\n//             // pinata_api_key: `Enter Your Key`,\r\n//             // pinata_secret_api_key: `Enter Your Secret Key`,\r\n//             pinata_api_key: `f7bfae89954d6952f7db`,\r\n//             pinata_secret_api_key: `b14a8922caffb575dc24061e5e6eebfd7f4b16c4e2b4ba078349a94cc24a7004`,\r\n//             \"Content-Type\": \"multipart/form-data\",\r\n//           },\r\n//         });\r\n//         const ImgHash = `https://gateway.pinata.cloud/ipfs/${resFile.data.IpfsHash}`;   //imsge hash is generated see ipfs documentation how to get image hash\r\n//         contract.add(account,ImgHash);     //this image hash is added on smart contract this add function is defined in smart contract\r\n//         alert(\"Successfully Image Uploaded\");\r\n//         setFileName(\"No image selected\");\r\n//         setFile(null);\r\n//       } catch (e) {\r\n//         alert(\"Unable to upload image to Pinata\");\r\n//       }\r\n//     }\r\n//     alert(\"Successfully Image Uploaded\");\r\n//     setFileName(\"No image selected\");\r\n//     setFile(null);\r\n//   };\r\n//   const retrieveFile = (e) => {\r\n//     const data = e.target.files[0]; //files array of files object this object contain all information of that choosen file\r\n//     // console.log(data);\r\n//     const reader = new window.FileReader();     //to read the file\r\n//     reader.readAsArrayBuffer(data);\r\n//     reader.onloadend = () => {        //when file completely read then it will set that file or we can say choose that file\r\n//       setFile(e.target.files[0]);\r\n//     };\r\n//     setFileName(e.target.files[0].name);   //and this file object contain all info about file so from that we choose that filename\r\n//     e.preventDefault();\r\n//   };\r\n//   return (\r\n//     <div className=\"top\">\r\n//       <form className=\"form\" onSubmit={handleSubmit}>\r\n//         <label htmlFor=\"file-upload\" className=\"choose\">\r\n//           Choose File\r\n//         </label>\r\n//         <input\r\n//           disabled={!account}    //if metamask account is not there then it will not take input\r\n//           type=\"file\"\r\n//           id=\"file-upload\"\r\n//           name=\"data\"\r\n//           onChange={retrieveFile}\r\n//         />\r\n//         <span className=\"textArea\">File: {fileName}</span>\r\n//         <button type=\"submit\" className=\"upload\" disabled={!file}>   \r\n//           Upload File                                                \r\n//         </button>\r\n//         {/*upload button not work till there is any file choosen this is done by disable property otherwise withoud file also it will functioning*/ }\r\n//       </form>\r\n//     </div>\r\n//   );\r\n// }\r\n// export default FileUpload"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}